{% set name = "PolySche" %}
{% set version = "0.1.2" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/rolanddenis/polysche/archive/v{{ version }}.tar.gz
  sha256: cb3f7c24fe4a81b292699724f52b159854afc1ae469080a852f2ed310330da49

build:
  number: 0

requirements:
  build:
    - {{ compiler('cxx') }}
    - cmake
    - ninja
  host:
  run:

test:
  commands:
    - test -d "${PREFIX}/include/polysche"  # [unix]
    - test -f "${PREFIX}/include/polysche/rational.hpp"  # [unix]
    - test -f ${PREFIX}/lib/cmake/PolySche/PolyScheConfig.cmake  # [unix]
    - test -f ${PREFIX}/lib/cmake/PolySche/PolyScheConfigVersion.cmake  # [unix]
    - if not exist %LIBRARY_PREFIX%\include\polysche\rational.hpp (exit 1)  # [win]
    - if not exist %LIBRARY_PREFIX%\lib\cmake\PolySche\PolyScheConfig.cmake (exit 1)  # [win]
    - if not exist %LIBRARY_PREFIX%\lib\cmake\PolySche\PolyScheConfigVersion.cmake (exit 1)  # [win]

about:
  home: https://github.com/rolanddenis/PolySche
  summary: 'Statically (constexpr) generate interpolating polynomial and associated numerical scheme from linear constraints'
  description: |
    The goal of this C++17 library is to statically (eventually at compile-time) generate stencils involved in finite differences and finite volumes schemes that are based on polynomial interpolation.
    An interpolation polynomial is generated by solving a set of linear equations defined by some operations (evaluation, derivation, integration, ...) applied to a canonical polynomial.
    Once generated, this interpolation polynomial can be used as it (general formulation of the interpolation) or can be derivated and evaluated at a given point so that to recover the associated numerical scheme stencil.
    The coefficients are computed in the rational space so that to avoid numerical precision issues (except integer overflow).
  license: MIT
  license_family: MIT
  license_file: LICENSE

extra:
  recipe-maintainers:
    - rolanddenis
